# Name of the GitHub Actions workflow
name: "Infrastructure stack deployment"

#on: workflow_dispatch

# Define the triggers for when this workflow should run
on:
  # Run on push events to the "master" branch that affect files in the "terraform" directory
  push:
    branches:
      - "master"
    paths:
      - "terraform/**"
  # Run on pull requests to the "master" branch that affect files in the "terraform" directory
  #pull_request:
   # branches:
    #  - "master"
    #paths:
     # - "terraform/**"

# Specify permissions for pull requests
permissions:
  pull-requests: write

# Define environment variables used in the workflow
env:
  # Set the verbosity level for Terraform logs to INFO
  TF_LOG: INFO
  # AWS credentials for deployment
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for storing the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

# Define the jobs to be executed in this workflow
jobs:
  terraform:
    name: "CI/CD Infrastructure Deployment Workflow"
    runs-on: ubuntu-22.04

    # Default settings for job runs
    defaults:
      run:
        shell: bash  # Use the Bash shell for running commands
        working-directory: ./terraform  # Set the working directory to the "terraform" directory

    # Define the steps to be executed in this job
    steps:
      # Step 1: Checkout the repository to the runner
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        run: |
          # Set up AWS CLI credentials using secrets
          aws --version  # Display AWS CLI version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region eu-central-1  # Set the AWS region
        shell: bash

      # Step 3: Setup Terraform with a specified version on the runner
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5  # Specify the Terraform version to use

      # Step 4: Initialize Terraform
      - name: Terraform init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      # Step 5: Check Terraform code formatting
      - name: Terraform format
        run: terraform fmt -check

      # Step 6: Validate Terraform configurations
      - name: Terraform validate
        run: terraform validate

      # Step 7: Plan Terraform changes (only on pull requests)
      - name: Terraform plan
        if: github.event_name == 'pull_request'  # Only run on pull requests
        id: plan
        run: terraform plan -no-color -input=false | tee tfplan.txt  # Save plan output to a file
        continue-on-error: true  # Continue on errors

      # Step 8: Comment on the Pull Request with Terraform plan details (only on pull requests)
      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'  # Only run on pull requests
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            import os #python package

            # Read Terraform plan from tfplan.txt
            with open("tfplan.txt", "r") as file:
                terraform_plan = file.read()

            # Construct the comment body with Terraform plan details
            comment_body = f"""#### Terraform Format and Style üñå`${{ steps.fmt.outcome }}`
            #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Validation ü§ñ`${{ steps.validate.outcome }}`
            #### Terraform Plan üìñ`${{ steps.plan.outcome }}`

            <details><summary>Show Plan</summary>
            ```
            {terraform_plan}
            ```
            </details>

            *Pushed by: @{os.environ['GITHUB_ACTOR']}, Action: {os.environ['GITHUB_EVENT_NAME']}*"""

            # Create a comment on the pull request with the Terraform plan details
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment_body
            })

      # Step 9: Terraform Plan Status (exit with error if plan step failed)
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Step 10: Apply Terraform changes (only on push to master)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'  # Only run on push to master
        run: terraform apply -auto-approve -input=false  # Apply Terraform changes
